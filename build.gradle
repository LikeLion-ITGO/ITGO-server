plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'likelion'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

configurations.configureEach {
	exclude group: 'commons-logging', module: 'commons-logging'
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

repositories {
	mavenCentral()
}

dependencies {

	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Database
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// Web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Tools
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.3.3'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// SpringDoc - Swagger UI
	implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0")

	// S3
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.671'

	// Security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// Jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

def qdir = "$buildDir/generated/querydsl"

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorGeneratedSourcesDirectory = file(qdir)
}
sourceSets {
	main.java.srcDirs += [ qdir ]
}